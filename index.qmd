---
title: "Netflix Content Analyis"
author: "Brett Egbert"
date: "2023-08-15"
abstract: "Preparation of Netflix data for use in a Tableau dashboard."
title-block-banner: false
---

> To view my professional profile, cv, and other portfolio items, please visit <a href="https://wbegbert.netlify.app">wbegbert.netlify.app</a>

## Environment

### Tools

The following open-source tools were used to create this report.

| tool | about |
| --- | --- | --- |
| [VS Code](https://code.visualstudio.com/) | text & code editor |
| [Quarto](https://quarto.org/) | technical publishing system |
| [R](https://www.r-project.org/) | programming language for statistical computing |

VS Code was used to create a `.qmd` Quarto document, which employs markdown and code blocks similar to a [Jupyter notebook](https://jupyter.org/). Quarto uses [pandoc](https://pandoc.org/) to convert the `.qmd` document into an HTML file, which in turn can be customized visually using CSS and Bootstrap variables.

The end result is a human-readable source document that is highly adaptable and cabable of displaying complex information. 

### Library

For this data preparation and exploration I made use of the [tidyverse](https://www.tidyverse.org/) collection of data science packages within the R coding language.

```{r import-library}
#| output: false
# import libraries
library(tidyverse)
```

### Dataset

I used the [Netflix Movies and TV Shows](https://www.kaggle.com/datasets/shivamb/netflix-shows?resource=download) dataset, acquired from [kaggle](https://www.kaggle.com/) on July 2023. 

This dataset contains listings of all movies and tv shows available on Netflix.

| column name | about |
| --- | --- | --- |
| `show_id` | unique ID for every movie/tv show |
| `type` | identifier as a movie or tv show |
| `title` | title of the movie/tv show |
| `director` | director of the movie |
| `cast` | actors involved in the movie/tv show |
| `country` | country where the movie/tv show was produced |
| `date_added` | date when the movie/tv show was added on Netflix |
| `release_year` | actual release year of the movie/tv show |
| `rating` | MPAA rating of the movie/tv show |
| `duration` | total duration - in minutes or number of seasons |
| `listed_in` | genre of the movie/tv show |
| `description` | summary of the movie/tv show |

: Netflix Movies and TV Shows dataset  columns

I imported the csv into a dataframe named `df`.

```{r import-data}
#| output: false
# import csv as dataframe
df <- read_csv("data\\netflix_titles.csv")
```

## Prepare

The `head()` preview allows us to view the first few rows of data while the `glimpse()` function identifies column names, column data types, and sample values for each column. 

```{r preview-data}
# preview dataframe
df %>%
  head(20)

# review column data types and sample values
df %>%
  glimpse()
```

### Data Issues
The following data issues were identified to be addressed.

1. `director`, `cast`, `country`, and `listed_in` columns contain multiple values per column
2. `date_added` column is a string in the form "Month Day, Year"
3. `ratings` column contains several misplaced `duration` values
4. `duration` column uses different units based on the type (e.g., shows = seasons, movies = minutes)

#### Issue 1: `director`, `cast`, `country`, `listed_in`

I addressed the multiple values by separating the indicated columns from the primary df. Those columns were then lengthened so each multi-value entry was broken up into new separate rows.

```{r issue-1-fix}
# exclude multi-value columns
df_content <- df %>%
  select(-director, -cast, -country, -listed_in)

# separate df and lengthen for director
df_director <- df %>%
  select(show_id, director) %>%
  separate_longer_delim(director, delim = ", ")

# separate df and lengthen for cast
df_cast <- df %>%
  select(show_id, cast) %>%
  separate_longer_delim(cast, delim = ", ")

# separate df and lengthen for country
df_country <- df %>%
  select(show_id, country) %>%
  separate_longer_delim(country, delim = ", ")

# separate df and lengthen for genre
df_genre <- df %>%
  select(show_id, listed_in) %>%
  rename(genre = listed_in) %>% # rename column
  separate_longer_delim(genre, delim = ", ")
```

During this phase it was discovered that several countries had a trailing comma, which was confirmed to exist in the original dataset. A last step was taken in `df_country` to remove this trailing comma.

```{r issue-1-country-comma}
df_country <- df_country %>%
  mutate(country = str_remove(country, ",+$"))
```

##### Verify changes

```{r issue-1-verify}
# preview content
df_content %>%
  head(20)

# preview director
df_director %>%
  head(20)

# preview cast
df_cast %>%
  head(20)

# preview country
df_country %>%
  head(20)

# preview genre
df_genre %>%
  head(20)
```

We can now confirm that the new lengthened dataframes correctly capture the original information on individual rows, such as with the `show_id` "s7" with multiple directors.

#### Issue 2: `date_added`

I addressed the date format by converting to an appropriate data type for the column `date_added` within `df_content`. This converts a string-based value of "September 25, 2021" into a date-based value of "2021-09-25" in the ISO 8601 international date standard.

```{r issue-2-fix}
# convert date format and data type
df_content <- df_content %>%
  mutate(date_added = as.Date(date_added, format = "%B %d, %Y"))
```

##### Verify changes

```{r issue-2-verify}
# preview date_added values
df_content %>%
  select(show_id, type, date_added) %>%
  head()
```

#### Issue 3: `rating` => `duration`

A value count of the `rating` column in `df` reveals three misplaced `duration` values. 

```{r issue-3-explore}
# rating value counts
df_content %>%
  count(rating)

# view entries with "min" in rating
df_content %>%
  filter(grepl("min", rating)) %>%
  select(title, rating, duration)
```

The three "Louis C.K." titles incorrectly indicate a duration in place of a rating. To correct the issue I copied the misplaced values into `duration` and updated the values in `rating` to be `NA` missing values

```{r issue-3-fix}
# replace "min" values in rating with NA and copy to duration
df_content <- df_content %>%
  mutate(
    duration = ifelse(grepl(" min", rating), rating, duration),
    rating = ifelse(grepl(" min", rating), NA, rating)
  )
```

##### Verify changes

```{r issue-3-verify}
# verify changes - rating value counts
df_content %>%
  count(rating)

# verify changes - view entries with "min" in rating
df_content %>%
  filter(grepl("min", rating)) %>%
  select(title, rating, duration)

# verify changes - view entries with "Louis" in title
df_content %>%
  filter(str_starts(title, "Louis")) %>%
  select(title, rating, duration)
```

During verification if was confirmed that the `rating` column now only contains rating values and that the "Louis" titles have been corrected.

#### Issue 4: `duration`

I addressed the mixed units in the `duration` column by separating the column into two columns, one containing tv shows (`duration_n_seasons`) and the other movies (`duration_mins`). In both cases I removed the trailing characters (i.e., units) and converted the values into numeric data types. The original`duration` column was preserved.

```{r issue-4-fix}
# create new columns for duration
df_content <- df_content %>%
  mutate(
    duration_n_seasons = ifelse(type == "TV Show", as.numeric(str_remove(duration, " .*")), NA),
    duration_mins = ifelse(type == "Movie", as.numeric(str_remove(duration, " .*")), NA)
  )
```

##### Verify changes

```{r issue-4-verify}
# preview duration values
df_content %>%
  select(type, duration, duration_n_seasons, duration_mins)
```

### Workflow Summary

```{mermaid workflow-summary}
%%{init: {"flowchart": {"htmlLabels": false}} }%%
flowchart TB
  import(["import data as df"])
  identify["identify issues"]
  adjust["adjust date format, misplaced values, inconsistent units"]
  content(["df_content"])
  lengthen(["lengthen multi-value columns"])
  multi(["df_director
  df_cast
  df_country
  df_genre"])

  import --- identify --- adjust --- content
  identify --- lengthen --- multi
```

## Investigate

I began by removing the missing values from within my column-specific dataframes. I then counted the number of titles per member in descending order.

### `df_director`

```{r analysis-director}
# remove rows with missing director values
df_director_clean <- df_director %>%
  drop_na(director)

# count number of titles per director
df_director_clean %>%
  group_by(director) %>%
  summarize(title_count = n_distinct(show_id)) %>%
  arrange(desc(title_count))
```

### `df_cast`

```{r analysis-cast}
# remove rows with missing cast values
df_cast_clean <- df_cast %>%
  drop_na(cast)

# count number of titles per cast
df_cast_clean %>%
  group_by(cast) %>%
  summarize(title_count = n_distinct(show_id)) %>%
  arrange(desc(title_count))
```

### `df_country`

```{r analysis-country}
# remove rows with missing country values
df_country_clean <- df_country %>%
  drop_na(country)

# count number of titles per country
df_country_clean %>%
  group_by(country) %>%
  summarize(title_count = n_distinct(show_id)) %>%
  arrange(desc(title_count))
```

### `df_genre`

```{r analysis-genre}
# remove rows with missing genre values
df_genre_clean <- df_genre %>%
  drop_na(genre)

# count number of titles per genre
df_genre_clean %>%
  group_by(genre) %>%
  summarize(title_count = n_distinct(show_id)) %>%
  arrange(desc(title_count))
```

### `df_content`

To finish my analysis I explored the main data found in `df_content`.

```{r analysis-content-release-year-count}
#| warning: false
# title count by release year & type
df_content %>%
  group_by(release_year, type) %>%
  summarize(title_count = n_distinct(show_id)) %>%
  pivot_wider(names_from = type, values_from = title_count, names_prefix = "count_") %>%
  arrange(release_year)
```

```{r analysis-content-year-added-count}
#| warning: false
# title count by year added & type
df_content %>%
  mutate(year_added = year(date_added)) %>%
  group_by(year_added, type) %>%
  summarize(title_count = n_distinct(show_id)) %>%
  pivot_wider(names_from = type, values_from = title_count, names_prefix = "count_") %>%
  arrange(year_added)
```

## Export

The primary analysis will take place in a Tableau dashboard^[coming soon!]. At this point the dataframes were exported as csv files for use in other applications.


```{r export-csv}
# Export df_content to CSV
write_csv(df_content, file.path("data", "df_content.csv"))

# Export df_director to CSV
write_csv(df_director_clean, file.path("data", "df_director.csv"))

# Export df_cast to CSV
write_csv(df_cast_clean, file.path("data", "df_cast.csv"))

# Export df_country to CSV
write_csv(df_country_clean, file.path("data", "df_country.csv"))

# Export df_genre to CSV
write_csv(df_genre_clean, file.path("data", "df_genre.csv"))
```