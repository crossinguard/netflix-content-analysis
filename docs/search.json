[
  {
    "objectID": "netflix-analysis.html",
    "href": "netflix-analysis.html",
    "title": "Netflix Content Analyis",
    "section": "",
    "text": "The following open-source tools were used to create this report.\n\n\n\ntool\nabout\n\n\n\n\n\nVS Code\ntext & code editor\n\n\n\nQuarto\ntechnical publishing system\n\n\n\nR\nprogramming language for statistical computing\n\n\n\n\nVS Code was used to create a .qmd Quarto document, which employs markdown and code blocks similar to a Jupyter notebook. Quarto uses pandoc to convert the .qmd document into an HTML file, which in turn can be customized visually using CSS and Bootstrap variables.\nThe end result is a highly adaptable document cabable of displaying complex code and data visualizations.\n\n\n\nFor this data preparation and exploration I made use of the tidyverse collection of data science packages within the R coding language.\n\n# import libraries\nlibrary(tidyverse)\n\n\n\n\nI used the Netflix Movies and TV Shows dataset, acquired from kaggle on July 2023.\nThis dataset contains listings of all movies and tv shows available on Netflix.\n\nNetflix Movies and TV Shows dataset columns\n\n\ncolumn name\nabout\n\n\n\n\n\nshow_id\nunique ID for every movie/tv show\n\n\n\ntype\nidentifier as a movie or tv show\n\n\n\ntitle\ntitle of the movie/tv show\n\n\n\ndirector\ndirector of the movie\n\n\n\ncast\nactors involved in the movie/tv show\n\n\n\ncountry\ncountry where the movie/tv show was produced\n\n\n\ndate_added\ndate when the movie/tv show was added on Netflix\n\n\n\nrelease_year\nactual release year of the movie/tv show\n\n\n\nrating\nMPAA rating of the movie/tv show\n\n\n\nduration\ntotal duration - in minutes or number of seasons\n\n\n\nlisted_in\ngenre of the movie/tv show\n\n\n\ndescription\nsummary of the movie/tv show\n\n\n\n\nI imported the csv into a tibble (i.e., dataframe) named df.\n\n# import csv as dataframe\ndf &lt;- read_csv(\"data\\\\netflix_titles.csv\")"
  },
  {
    "objectID": "netflix-analysis.html#environment",
    "href": "netflix-analysis.html#environment",
    "title": "Netflix Content Analyis",
    "section": "",
    "text": "The following open-source tools were used to create this report.\n\n\n\ntool\nabout\n\n\n\n\n\nVS Code\ntext & code editor\n\n\n\nQuarto\ntechnical publishing system\n\n\n\nR\nprogramming language for statistical computing\n\n\n\n\nVS Code was used to create a .qmd Quarto document, which employs markdown and code blocks similar to a Jupyter notebook. Quarto uses pandoc to convert the .qmd document into an HTML file, which in turn can be customized visually using CSS and Bootstrap variables.\nThe end result is a highly adaptable document cabable of displaying complex code and data visualizations.\n\n\n\nFor this data preparation and exploration I made use of the tidyverse collection of data science packages within the R coding language.\n\n# import libraries\nlibrary(tidyverse)\n\n\n\n\nI used the Netflix Movies and TV Shows dataset, acquired from kaggle on July 2023.\nThis dataset contains listings of all movies and tv shows available on Netflix.\n\nNetflix Movies and TV Shows dataset columns\n\n\ncolumn name\nabout\n\n\n\n\n\nshow_id\nunique ID for every movie/tv show\n\n\n\ntype\nidentifier as a movie or tv show\n\n\n\ntitle\ntitle of the movie/tv show\n\n\n\ndirector\ndirector of the movie\n\n\n\ncast\nactors involved in the movie/tv show\n\n\n\ncountry\ncountry where the movie/tv show was produced\n\n\n\ndate_added\ndate when the movie/tv show was added on Netflix\n\n\n\nrelease_year\nactual release year of the movie/tv show\n\n\n\nrating\nMPAA rating of the movie/tv show\n\n\n\nduration\ntotal duration - in minutes or number of seasons\n\n\n\nlisted_in\ngenre of the movie/tv show\n\n\n\ndescription\nsummary of the movie/tv show\n\n\n\n\nI imported the csv into a tibble (i.e., dataframe) named df.\n\n# import csv as dataframe\ndf &lt;- read_csv(\"data\\\\netflix_titles.csv\")"
  },
  {
    "objectID": "netflix-analysis.html#prepare",
    "href": "netflix-analysis.html#prepare",
    "title": "Netflix Content Analyis",
    "section": "2 Prepare",
    "text": "2 Prepare\nThe head() preview allows us to view the first few rows of data while the glimpse() function identifies column names, column data types, and sample values for each column.\n\n# preview dataframe\ndf %&gt;%\n  head()\n\n\n\n  \n\n\n# review column data types and sample values\ndf %&gt;%\n  glimpse()\n\nRows: 8,807\nColumns: 12\n$ show_id      &lt;chr&gt; \"s1\", \"s2\", \"s3\", \"s4\", \"s5\", \"s6\", \"s7\", \"s8\", \"s9\", \"s1…\n$ type         &lt;chr&gt; \"Movie\", \"TV Show\", \"TV Show\", \"TV Show\", \"TV Show\", \"TV …\n$ title        &lt;chr&gt; \"Dick Johnson Is Dead\", \"Blood & Water\", \"Ganglands\", \"Ja…\n$ director     &lt;chr&gt; \"Kirsten Johnson\", NA, \"Julien Leclercq\", NA, NA, \"Mike F…\n$ cast         &lt;chr&gt; NA, \"Ama Qamata, Khosi Ngema, Gail Mabalane, Thabang Mola…\n$ country      &lt;chr&gt; \"United States\", \"South Africa\", NA, NA, \"India\", NA, NA,…\n$ date_added   &lt;chr&gt; \"September 25, 2021\", \"September 24, 2021\", \"September 24…\n$ release_year &lt;dbl&gt; 2020, 2021, 2021, 2021, 2021, 2021, 2021, 1993, 2021, 202…\n$ rating       &lt;chr&gt; \"PG-13\", \"TV-MA\", \"TV-MA\", \"TV-MA\", \"TV-MA\", \"TV-MA\", \"PG…\n$ duration     &lt;chr&gt; \"90 min\", \"2 Seasons\", \"1 Season\", \"1 Season\", \"2 Seasons…\n$ listed_in    &lt;chr&gt; \"Documentaries\", \"International TV Shows, TV Dramas, TV M…\n$ description  &lt;chr&gt; \"As her father nears the end of his life, filmmaker Kirst…\n\n\n\n2.1 Data Issues\nThe following issues are to be explored further and addressed if able.\n\nThe cast column contains multiple cast members as a single value\n\nconvert column values to a list of values\n\nThe date_added column is a string in the form “Month Day, Year”\n\nconvert to YYYY-MM-DD datetime\n\nThe ratings column contains several misplaced duration values\n\ncopy misplaced values to duration and replace existing ratings values with NA\n\nThe duration column uses different units based on the type (e.g., shows = seasons, movies = minutes)\n\nsegment df by type, remove units from values\n\nThe are NA values throughout many columns\n\n\n2.1.1 Column: cast\nI addressed the multiple cast members by splitting the string values in cast using a comma delimiter. This created a list of distinct cast members still contained in the original cast column.\n\n# convert cast column to list\ndf &lt;- df %&gt;%\n  mutate(cast = str_split(cast, \", \"))\n\n\n# preview dataframe\ndf %&gt;%\n  select(title, type, cast) %&gt;%\n  head()\n\n\n\n  \n\n\n# preview cast list values\ndf$cast %&gt;%\n  head()\n\n[[1]]\n[1] NA\n\n[[2]]\n [1] \"Ama Qamata\"           \"Khosi Ngema\"          \"Gail Mabalane\"       \n [4] \"Thabang Molaba\"       \"Dillon Windvogel\"     \"Natasha Thahane\"     \n [7] \"Arno Greeff\"          \"Xolile Tshabalala\"    \"Getmore Sithole\"     \n[10] \"Cindy Mahlangu\"       \"Ryle De Morny\"        \"Greteli Fincham\"     \n[13] \"Sello Maake Ka-Ncube\" \"Odwa Gwanya\"          \"Mekaila Mathys\"      \n[16] \"Sandi Schultz\"        \"Duane Williams\"       \"Shamilla Miller\"     \n[19] \"Patrick Mofokeng\"    \n\n[[3]]\n[1] \"Sami Bouajila\"        \"Tracy Gotoas\"         \"Samuel Jouy\"         \n[4] \"Nabiha Akkari\"        \"Sofia Lesaffre\"       \"Salim Kechiouche\"    \n[7] \"Noureddine Farihi\"    \"Geert Van Rampelberg\" \"Bakary Diombera\"     \n\n[[4]]\n[1] NA\n\n[[5]]\n[1] \"Mayur More\"     \"Jitendra Kumar\" \"Ranjan Raj\"     \"Alam Khan\"     \n[5] \"Ahsaas Channa\"  \"Revathi Pillai\" \"Urvi Singh\"     \"Arun Kumar\"    \n\n[[6]]\n [1] \"Kate Siegel\"      \"Zach Gilford\"     \"Hamish Linklater\" \"Henry Thomas\"    \n [5] \"Kristin Lehman\"   \"Samantha Sloyan\"  \"Igby Rigney\"      \"Rahul Kohli\"     \n [9] \"Annarah Cymone\"   \"Annabeth Gish\"    \"Alex Essoe\"       \"Rahul Abburi\"    \n[13] \"Matt Biedel\"      \"Michael Trucco\"   \"Crystal Balint\"   \"Louis Oliver\"    \n\n\nWe can now confirm that the cast column correctly captures the original information in a list value. Each cast list indicates the number of cast members included and can be expanded when needed.\n\n\n2.1.2 Column: date_added\nI addressed the date format by converting to an appropriate data type for the column date_added. This converts a string-based value of “September 25, 2021” into a date-based value of “2021-09-25” in the ISO 8601 international date standard.\n\n# convert date format and data type\ndf &lt;- df %&gt;%\n  mutate(date_added = as.Date(date_added, format = \"%B %d, %Y\"))\n\n\n# preview date_added values\ndf %&gt;%\n  select(title, type, date_added) %&gt;%\n  head()\n\n\n\n  \n\n\n\n\n\n2.1.3 Column: rating =&gt; duration\nA value count of the rating column in df reveals three misplaced duration values.\n\n# rating value counts\ndf %&gt;%\n  count(rating)\n\n\n\n  \n\n\n# view entries with \"min\" in rating\ndf %&gt;%\n  filter(grepl(\"min\", rating)) %&gt;%\n  select(title, rating, duration)\n\n\n\n  \n\n\n\nTo correct the issue I copied the misplaced values into duration and updated the values in rating to be NA missing values\n\n# replace \"min\" values in rating with NA and copy to duration\ndf &lt;- df %&gt;%\n  mutate(\n    duration = ifelse(grepl(\" min\", rating), rating, duration),\n    rating = ifelse(grepl(\" min\", rating), NA, rating)\n  )\n\n\n# verify changes - rating value counts\ndf %&gt;%\n  count(rating)\n\n\n\n  \n\n\n# verify changes - view entries with \"min\" in rating\ndf %&gt;%\n  filter(grepl(\"min\", rating)) %&gt;%\n  select(title, rating, duration)\n\n\n\n  \n\n\n# verify changes - view entries with \"Louis\" in title\ndf %&gt;%\n  filter(str_starts(title, \"Louis\")) %&gt;%\n  select(title, rating, duration)\n\n\n\n  \n\n\n\n\n\n2.1.4 Column: duration\nI addressed the mixed units in the duration column by segmenting the dataframe into two new dataframes, one containing tv shows (df_tv) and the other movies (df_movie). In both cases I removed the trailing characters (i.e., units) and converted the values into numeric data types in a new, more descriptive column. The originalduration column was preserved.\n\n# only tv shows\ndf_tv &lt;- df %&gt;%\n  filter(type == \"TV Show\")\n\n# remove units and rename column\ndf_tv &lt;- df_tv %&gt;%\n  mutate(n_seasons = as.numeric(str_remove(duration, \" .*\")))\n\n# preview n_seasons\ndf_tv %&gt;%\n  select(title, type, duration, n_seasons)\n\n\n\n  \n\n\n\n\n# only movies\ndf_movie &lt;- df %&gt;%\n  filter(type == \"Movie\")\n\n# remove units and rename column\ndf_movie &lt;- df_movie %&gt;%\n  mutate(duration_mins = as.numeric(str_remove(duration, \" .*\")))\n\ndf_movie %&gt;%\n  select(title, type, duration, duration_mins)\n\n\n\n  \n\n\n\n\n\n2.1.5 Dataframe: NA\nTo conclude my data preparations, I expored the missing values (NA) present in each of the type-based dataframes df_tv and df_movie.\n\n2.1.5.1 TV Shows\n\n# count the number of non-missing values in tv shows\ndf_tv %&gt;%\n  summarize_all(list(~ sum(!is.na(.))))\n\n\n\n  \n\n\n# count the number of NA missing values in tv shows\ndf_tv %&gt;%\n  summarize_all(list(~ sum(is.na(.))))\n\n\n\n  \n\n\n\nThe columns director, cast, country, date_added, and rating contain missing values.\nThe director for a TV show is often a collection of directors depending on the episode and therefore not unexpected for missing values. No adjustments were made.\nThe rating column was missing very few values and was examined in comparison to the remaining flagged columns.\n\n# NA values - rating column\ndf_tv %&gt;%\n  filter(is.na(rating)) %&gt;%\n  select(title, cast, country, date_added, rating)\n\n\n\n  \n\n\n\nThe two entries with missing values for rating are from different countries and years with no other missing values. No adjustments were made.\nI next explored the remaining three columns: cast, country, and date_added by counting the missing values in each in comparison to each other. This approach should inform whether a missing value in one column has a relationship to a missing value in another.\n\n# df_tv with missing value flags for cast, country, date_added\ndf_missing_tv &lt;- df_tv %&gt;%\n  mutate(\n    cast_missing = is.na(cast),\n    country_missing = is.na(country),\n    date_added_missing = is.na(date_added)\n  )\n\ndf_missing_tv %&gt;%\n  select(title, cast_missing, country_missing, date_added_missing)\n\n\n\n  \n\n\n\n\n# summary counts of missing value pairings\nmissing_counts_tv &lt;- df_missing_tv %&gt;%\n  group_by(cast_missing, country_missing, date_added_missing) %&gt;%\n  summarize(count = n())\n\nmissing_counts_tv\n\n\n\n  \n\n\n\nThe most common occurance was no missing values, followed by missing only the country value or the cast value. Of the 2,676 entries for TV shows in df_tv, only 99 entries (3.7%) are missing values across multiple columns.\nNone of these findings raised concerns as to the usability of this data and no actions were needed to address the missing values.\n\n\n2.1.5.2 Movies\n\n# count the number of non-missing values in movies\ndf_movie %&gt;%\n  summarize_all(list(~ sum(!is.na(.))))\n\n\n\n  \n\n\n# count the number of NA values in movies\ndf_movie %&gt;%\n  summarize_all(list(~ sum(is.na(.))))\n\n\n\n  \n\n\n\nThe columns director, cast, country, and rating contain missing values.\nThe rating column was missing very few values and was examined in comparison to the other flagged columns.\n\n# NA values - rating column\ndf_movie %&gt;%\n  filter(is.na(rating)) %&gt;%\n  select(title, director, cast, country, rating)\n\n\n\n  \n\n\n\nThe Louis C.K. entries were edited earlier for their misplaced duration values, so these NA values were expected. No adjustments were made.\nI next explored the remaining three columns: director, cast, and country by counting the missing values in each in comparison to each other. This approach should inform whether a missing value in one column has a relationship to a missing value in another.\n\n# df_movie with missing value flags for director, cast, country\ndf_missing_movie &lt;- df_movie %&gt;%\n  mutate(\n    director_missing = is.na(director),\n    cast_missing = is.na(cast),\n    country_missing = is.na(country)\n  )\n\ndf_missing_movie %&gt;%\n  select(title, director_missing, cast_missing, country_missing)\n\n\n\n  \n\n\n\n\n# summary counts of missing value pairings\nmissing_counts_movie &lt;- df_missing_movie %&gt;%\n  group_by(director_missing, cast_missing, country_missing) %&gt;%\n  summarize(count = n())\n\nmissing_counts_movie\n\n\n\n  \n\n\n\nThe most common occurance was no missing values, followed by missing only the country value or the cast value. This same trend was observed with df_tv. Of the 6,131 entries for movies in df_movie, only 144 entries (2.3%) are missing values across multiple columns.\nNone of these findings raised concerns as to the usability of this data and no actions were needed to address the missing values.\n\n\n\n\n2.2 Workflow summary\n\n\n\n\n%%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\nflowchart TB\n  import[\"import data as df\"]\n  identify[\"identify issues\"]\n  issues[\"address column issues:\n  - column: cast \n  - column: date_added\n  - column: rating =&gt; duration\n  - column: duration\"]\n  tv[\"segment tv as df_tv\"]\n  movie[\"segment movies as df_movie\"]\n  NA[\"investigate NA values\"]\n  NA2[\"investigate NA values\"]\n  tv-clean[\"visualize & export data as df_tv_clean\"]\n  movie-clean[\"visualize & export data as df_movie_clean\"]\n\n  import --&gt; identify --&gt; issues --&gt; tv & movie\n  tv --&gt; NA --&gt; tv-clean\n  movie --&gt; NA2 --&gt; movie-clean"
  },
  {
    "objectID": "netflix-analysis.html#visualize",
    "href": "netflix-analysis.html#visualize",
    "title": "Netflix Content Analyis",
    "section": "3 Visualize",
    "text": "3 Visualize\n\n3.1 Count by Release Decade\n\n\n\n\n\n\n\n\n\n\n\n\n3.2 Count by Release Decade to Year Added\n\n\n\n\n\n\n\n\n\n\n\n\n3.3 Avg. Seasons per Rating\n\n\n\n\n\n\n\n\n\n\n\n\n3.4 Output\nI concluded by exporting df_tv and df_movie for use in Tableau.\n\n# export as csv - tv shows\n# write_csv(df_tv, \"output/df_tv_clean.csv\")\n\n# export as csv - movies\n# write_csv(df_movie, \"output/df_movie_clean.csv\")"
  }
]