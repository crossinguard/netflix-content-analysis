[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Netflix Content Analyis",
    "section": "",
    "text": "To view my professional profile, cv, and other portfolio items, please visit wbegbert.netlify.app"
  },
  {
    "objectID": "index.html#environment",
    "href": "index.html#environment",
    "title": "Netflix Content Analyis",
    "section": "Environment",
    "text": "Environment\n\nTools\nThe following open-source tools were used to create this report.\n\n\n\ntool\nabout\n\n\n\n\n\nVS Code\ntext & code editor\n\n\n\nQuarto\ntechnical publishing system\n\n\n\nR\nprogramming language for statistical computing\n\n\n\n\nVS Code was used to create a .qmd Quarto document, which employs markdown and code blocks similar to a Jupyter notebook. Quarto uses pandoc to convert the .qmd document into an HTML file, which in turn can be customized visually using CSS and Bootstrap variables.\nThe end result is a human-readable source document that is highly adaptable and cabable of displaying complex information.\n\n\nLibrary\nFor this data preparation and exploration I made use of the tidyverse collection of data science packages within the R coding language.\n\n# import libraries\nlibrary(tidyverse)\n\n\n\nDataset\nI used the Netflix Movies and TV Shows dataset, acquired from kaggle on July 2023.\nThis dataset contains listings of all movies and tv shows available on Netflix.\n\nNetflix Movies and TV Shows dataset columns\n\n\ncolumn name\nabout\n\n\n\n\n\nshow_id\nunique ID for every movie/tv show\n\n\n\ntype\nidentifier as a movie or tv show\n\n\n\ntitle\ntitle of the movie/tv show\n\n\n\ndirector\ndirector of the movie\n\n\n\ncast\nactors involved in the movie/tv show\n\n\n\ncountry\ncountry where the movie/tv show was produced\n\n\n\ndate_added\ndate when the movie/tv show was added on Netflix\n\n\n\nrelease_year\nactual release year of the movie/tv show\n\n\n\nrating\nMPAA rating of the movie/tv show\n\n\n\nduration\ntotal duration - in minutes or number of seasons\n\n\n\nlisted_in\ngenre of the movie/tv show\n\n\n\ndescription\nsummary of the movie/tv show\n\n\n\n\nI imported the csv into a dataframe named df.\n\n# import csv as dataframe\ndf &lt;- read_csv(\"data\\\\netflix_titles.csv\")"
  },
  {
    "objectID": "index.html#prepare",
    "href": "index.html#prepare",
    "title": "Netflix Content Analyis",
    "section": "Prepare",
    "text": "Prepare\nThe head() preview allows us to view the first few rows of data while the glimpse() function identifies column names, column data types, and sample values for each column.\n\n# preview dataframe\ndf %&gt;%\n  head(20)\n\n\n\n  \n\n\n# review column data types and sample values\ndf %&gt;%\n  glimpse()\n\nRows: 8,807\nColumns: 12\n$ show_id      &lt;chr&gt; \"s1\", \"s2\", \"s3\", \"s4\", \"s5\", \"s6\", \"s7\", \"s8\", \"s9\", \"s1…\n$ type         &lt;chr&gt; \"Movie\", \"TV Show\", \"TV Show\", \"TV Show\", \"TV Show\", \"TV …\n$ title        &lt;chr&gt; \"Dick Johnson Is Dead\", \"Blood & Water\", \"Ganglands\", \"Ja…\n$ director     &lt;chr&gt; \"Kirsten Johnson\", NA, \"Julien Leclercq\", NA, NA, \"Mike F…\n$ cast         &lt;chr&gt; NA, \"Ama Qamata, Khosi Ngema, Gail Mabalane, Thabang Mola…\n$ country      &lt;chr&gt; \"United States\", \"South Africa\", NA, NA, \"India\", NA, NA,…\n$ date_added   &lt;chr&gt; \"September 25, 2021\", \"September 24, 2021\", \"September 24…\n$ release_year &lt;dbl&gt; 2020, 2021, 2021, 2021, 2021, 2021, 2021, 1993, 2021, 202…\n$ rating       &lt;chr&gt; \"PG-13\", \"TV-MA\", \"TV-MA\", \"TV-MA\", \"TV-MA\", \"TV-MA\", \"PG…\n$ duration     &lt;chr&gt; \"90 min\", \"2 Seasons\", \"1 Season\", \"1 Season\", \"2 Seasons…\n$ listed_in    &lt;chr&gt; \"Documentaries\", \"International TV Shows, TV Dramas, TV M…\n$ description  &lt;chr&gt; \"As her father nears the end of his life, filmmaker Kirst…\n\n\n\nData Issues\nThe following data issues were identified to be addressed.\n\ndirector, cast, country, and listed_in columns contain multiple values per column\ndate_added column is a string in the form “Month Day, Year”\nratings column contains several misplaced duration values\nduration column uses different units based on the type (e.g., shows = seasons, movies = minutes)\n\n\nIssue 1: director, cast, country, listed_in\nI addressed the multiple values by separating the indicated columns from the primary df. Those columns were then lengthened so each multi-value entry was broken up into new separate rows.\n\n# exclude multi-value columns\ndf_content &lt;- df %&gt;%\n  select(-director, -cast, -country, -listed_in)\n\n# separate df and lengthen for director\ndf_director &lt;- df %&gt;%\n  select(show_id, director) %&gt;%\n  separate_longer_delim(director, delim = \", \")\n\n# separate df and lengthen for cast\ndf_cast &lt;- df %&gt;%\n  select(show_id, cast) %&gt;%\n  separate_longer_delim(cast, delim = \", \")\n\n# separate df and lengthen for country\ndf_country &lt;- df %&gt;%\n  select(show_id, country) %&gt;%\n  separate_longer_delim(country, delim = \", \")\n\n# separate df and lengthen for genre\ndf_genre &lt;- df %&gt;%\n  select(show_id, listed_in) %&gt;%\n  rename(genre = listed_in) %&gt;% # rename column\n  separate_longer_delim(genre, delim = \", \")\n\nDuring this phase it was discovered that several countries had a trailing comma, which was confirmed to exist in the original dataset. A last step was taken in df_country to remove this trailing comma.\n\ndf_country &lt;- df_country %&gt;%\n  mutate(country = str_remove(country, \",+$\"))\n\n\nVerify changes\n\n# preview content\ndf_content %&gt;%\n  head(20)\n\n\n\n  \n\n\n# preview director\ndf_director %&gt;%\n  head(20)\n\n\n\n  \n\n\n# preview cast\ndf_cast %&gt;%\n  head(20)\n\n\n\n  \n\n\n# preview country\ndf_country %&gt;%\n  head(20)\n\n\n\n  \n\n\n# preview genre\ndf_genre %&gt;%\n  head(20)\n\n\n\n  \n\n\n\nWe can now confirm that the new lengthened dataframes correctly capture the original information on individual rows, such as with the show_id “s7” with multiple directors.\n\n\n\nIssue 2: date_added\nI addressed the date format by converting to an appropriate data type for the column date_added within df_content. This converts a string-based value of “September 25, 2021” into a date-based value of “2021-09-25” in the ISO 8601 international date standard.\n\n# convert date format and data type\ndf_content &lt;- df_content %&gt;%\n  mutate(date_added = as.Date(date_added, format = \"%B %d, %Y\"))\n\n\nVerify changes\n\n# preview date_added values\ndf_content %&gt;%\n  select(show_id, type, date_added) %&gt;%\n  head()\n\n\n\n  \n\n\n\n\n\n\nIssue 3: rating =&gt; duration\nA value count of the rating column in df reveals three misplaced duration values.\n\n# rating value counts\ndf_content %&gt;%\n  count(rating)\n\n\n\n  \n\n\n# view entries with \"min\" in rating\ndf_content %&gt;%\n  filter(grepl(\"min\", rating)) %&gt;%\n  select(title, rating, duration)\n\n\n\n  \n\n\n\nThe three “Louis C.K.” titles incorrectly indicate a duration in place of a rating. To correct the issue I copied the misplaced values into duration and updated the values in rating to be NA missing values\n\n# replace \"min\" values in rating with NA and copy to duration\ndf_content &lt;- df_content %&gt;%\n  mutate(\n    duration = ifelse(grepl(\" min\", rating), rating, duration),\n    rating = ifelse(grepl(\" min\", rating), NA, rating)\n  )\n\n\nVerify changes\n\n# verify changes - rating value counts\ndf_content %&gt;%\n  count(rating)\n\n\n\n  \n\n\n# verify changes - view entries with \"min\" in rating\ndf_content %&gt;%\n  filter(grepl(\"min\", rating)) %&gt;%\n  select(title, rating, duration)\n\n\n\n  \n\n\n# verify changes - view entries with \"Louis\" in title\ndf_content %&gt;%\n  filter(str_starts(title, \"Louis\")) %&gt;%\n  select(title, rating, duration)\n\n\n\n  \n\n\n\nDuring verification if was confirmed that the rating column now only contains rating values and that the “Louis” titles have been corrected.\n\n\n\nIssue 4: duration\nI addressed the mixed units in the duration column by separating the column into two columns, one containing tv shows (duration_n_seasons) and the other movies (duration_mins). In both cases I removed the trailing characters (i.e., units) and converted the values into numeric data types. The originalduration column was preserved.\n\n# create new columns for duration\ndf_content &lt;- df_content %&gt;%\n  mutate(\n    duration_n_seasons = ifelse(type == \"TV Show\", as.numeric(str_remove(duration, \" .*\")), NA),\n    duration_mins = ifelse(type == \"Movie\", as.numeric(str_remove(duration, \" .*\")), NA)\n  )\n\n\nVerify changes\n\n# preview duration values\ndf_content %&gt;%\n  select(type, duration, duration_n_seasons, duration_mins)\n\n\n\n  \n\n\n\n\n\n\n\nWorkflow Summary\n\n\n\n\n%%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\nflowchart TB\n  import([\"import data as df\"])\n  identify[\"identify issues\"]\n  adjust[\"adjust date format, misplaced values, inconsistent units\"]\n  content([\"df_content\"])\n  lengthen([\"lengthen multi-value columns\"])\n  multi([\"df_director\n  df_cast\n  df_country\n  df_genre\"])\n\n  import --- identify --- adjust --- content\n  identify --- lengthen --- multi"
  },
  {
    "objectID": "index.html#investigate",
    "href": "index.html#investigate",
    "title": "Netflix Content Analyis",
    "section": "Investigate",
    "text": "Investigate\nI began by removing the missing values from within my column-specific dataframes. I then counted the number of titles per member in descending order.\n\ndf_director\n\n# remove rows with missing director values\ndf_director_clean &lt;- df_director %&gt;%\n  drop_na(director)\n\n# count number of titles per director\ndf_director_clean %&gt;%\n  group_by(director) %&gt;%\n  summarize(title_count = n_distinct(show_id)) %&gt;%\n  arrange(desc(title_count))\n\n\n\n  \n\n\n\n\n\ndf_cast\n\n# remove rows with missing cast values\ndf_cast_clean &lt;- df_cast %&gt;%\n  drop_na(cast)\n\n# count number of titles per cast\ndf_cast_clean %&gt;%\n  group_by(cast) %&gt;%\n  summarize(title_count = n_distinct(show_id)) %&gt;%\n  arrange(desc(title_count))\n\n\n\n  \n\n\n\n\n\ndf_country\n\n# remove rows with missing country values\ndf_country_clean &lt;- df_country %&gt;%\n  drop_na(country)\n\n# count number of titles per country\ndf_country_clean %&gt;%\n  group_by(country) %&gt;%\n  summarize(title_count = n_distinct(show_id)) %&gt;%\n  arrange(desc(title_count))\n\n\n\n  \n\n\n\n\n\ndf_genre\n\n# remove rows with missing genre values\ndf_genre_clean &lt;- df_genre %&gt;%\n  drop_na(genre)\n\n# count number of titles per genre\ndf_genre_clean %&gt;%\n  group_by(genre) %&gt;%\n  summarize(title_count = n_distinct(show_id)) %&gt;%\n  arrange(desc(title_count))\n\n\n\n  \n\n\n\n\n\ndf_content\nTo finish my analysis I explored the main data found in df_content.\n\n# title count by release year & type\ndf_content %&gt;%\n  group_by(release_year, type) %&gt;%\n  summarize(title_count = n_distinct(show_id)) %&gt;%\n  pivot_wider(names_from = type, values_from = title_count, names_prefix = \"count_\") %&gt;%\n  arrange(release_year)\n\n\n\n  \n\n\n\n\n# title count by year added & type\ndf_content %&gt;%\n  mutate(year_added = year(date_added)) %&gt;%\n  group_by(year_added, type) %&gt;%\n  summarize(title_count = n_distinct(show_id)) %&gt;%\n  pivot_wider(names_from = type, values_from = title_count, names_prefix = \"count_\") %&gt;%\n  arrange(year_added)"
  },
  {
    "objectID": "index.html#export",
    "href": "index.html#export",
    "title": "Netflix Content Analyis",
    "section": "Export",
    "text": "Export\nThe primary analysis will take place in a Tableau dashboard1. At this point the dataframes were exported as csv files for use in other applications.1 coming soon!\n\n# Export df_content to CSV\nwrite_csv(df_content, file.path(\"data\", \"df_content.csv\"))\n\n# Export df_director to CSV\nwrite_csv(df_director_clean, file.path(\"data\", \"df_director.csv\"))\n\n# Export df_cast to CSV\nwrite_csv(df_cast_clean, file.path(\"data\", \"df_cast.csv\"))\n\n# Export df_country to CSV\nwrite_csv(df_country_clean, file.path(\"data\", \"df_country.csv\"))\n\n# Export df_genre to CSV\nwrite_csv(df_genre_clean, file.path(\"data\", \"df_genre.csv\"))"
  }
]